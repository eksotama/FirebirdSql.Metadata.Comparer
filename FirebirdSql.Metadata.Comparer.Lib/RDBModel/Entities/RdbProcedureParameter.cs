using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text;

namespace FirebirdSql.Metadata.Comparer.Lib.RDBModel.Entities
{
    /// <summary>
    /// RDB$PROCEDURE_PARAMETERS stores the parameters of stored procedures and their attributes. It holds one row for each parameter.
    /// <see href="https://firebirdsql.org/file/documentation/reference_manuals/fblangref25-en/html/fblangref-appx04-procparams.html"/>
    /// </summary>
    public class RdbProcedureParameter
    {
        /// <summary>
        /// Parameter name
        /// </summary>
        [MaxLength(31)]
        public string ParameterName { get; set; }

        /// <summary>
        /// The name of the procedure where the parameter is defined
        /// </summary>
        [MaxLength(31)]
        public string ProcedureName { get; set; }

        /// <summary>
        /// The sequential number of the parameter
        /// </summary>
        public short ParameterNumber { get; set; }

        /// <summary>
        /// Indicates whether the parameter is for input (value 0) or output (value 1)
        /// </summary>
        public short ParameterType { get; set; }

        /// <summary>
        /// The name of the user-created domain, when a domain is referenced instead of a data type. 
        /// If the name starts with the prefix 'RDB$', 
        /// it is the name of the domain automatically generated by the system for the parameter.
        /// </summary>
        [MaxLength(31)]
        public string FieldSource { get; set; }

        /// <summary>
        /// Could store comments related to the parameter
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// Indicates whether the parameter was defined by the system (value or greater) or by a user (value 0)
        /// </summary>
        public short SystemFlag { get; set; }

        /// <summary>
        /// The default value for the parameter, in the binary language representation (BLR)
        /// </summary>
        public byte[] DefaultValue { get; set; }

        /// <summary>
        /// The default value for the parameter, in PSQL code
        /// </summary>
        public string DefaultSource { get; set; }

        /// <summary>
        /// The identifier of the collation sequence used for a character parameter
        /// </summary>
        public short? CollationId { get; set; }

        /// <summary>
        /// The flag indicating whether NULL is allowable
        /// </summary>
        public short NullFlag { get; set; }

        /// <summary>
        /// Flag: indicates how this parameter is passed:
        /// 0 = by value
        /// 1 = by reference
        /// 2 = by descriptor
        /// 3 = by BLOB descriptor
        /// </summary>
        public short ParameterMechanism { get; set; }

        /// <summary>
        /// The name of the column the parameter references, 
        /// if it was declared using TYPE OF COLUMN instead of a regular data type. 
        /// Used in conjunction with RDB$RELATION_NAME (see next).
        /// </summary>
        [MaxLength(31)]
        public string FieldName { get; set; }

        /// <summary>
        /// The name of the table the parameter references, 
        /// if it was declared using TYPE OF COLUMN instead of a regular data type
        /// </summary>
        [MaxLength(31)]
        public string RelationName { get; set; }
    }
}
